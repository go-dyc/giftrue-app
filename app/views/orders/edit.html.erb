<div class="min-h-screen bg-gray-50 py-4">
  <div class="max-w-2xl mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-6">
      <h1 class="text-2xl font-bold text-gray-900 mb-2">🎁 기프트루 주문서 작성하기</h1>
      <p class="text-gray-600">단계별로 정보를 작성해주세요</p>
    </div>

    <!-- Progress Bar -->
    <div class="mb-6">
      <div class="flex justify-between items-center mb-2">
        <span class="text-sm font-medium text-gray-700">진행 상황</span>
        <span class="text-sm font-medium text-gray-700"><%= @step %>/3 단계</span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2">
        <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
             style="width: <%= (@step.to_f / 3 * 100).round(1) %>%"></div>
      </div>
      <div class="flex justify-between mt-1">
        <span class="text-xs text-gray-500 <%= 'font-semibold text-blue-600' if @step >= 1 %>">정면 사진</span>
        <span class="text-xs text-gray-500 <%= 'font-semibold text-blue-600' if @step >= 2 %>">포즈 및 의상 정보</span>
        <span class="text-xs text-gray-500 <%= 'font-semibold text-blue-600' if @step >= 3 %>">기념패 스타일 선택</span>
      </div>
    </div>

    <!-- Form Card -->
    <div class="bg-white rounded-lg shadow-md p-6">
      <%= form_with model: @order, url: @order.persisted? ? order_path(@order.naver_order_number) : orders_path, 
                    method: @order.persisted? ? :patch : :post, 
                    local: true, 
                    multipart: true, 
                    class: "space-y-8",
                    data: { turbo: false } do |form| %>
        
        <%= hidden_field_tag :step, @step %>
        <%= hidden_field_tag :naver_order_number, @order.naver_order_number unless @order.persisted? %>
        <%= hidden_field_tag :force_edit, true if @order.persisted? %>
        <% if @step < 3 %>
          <%= hidden_field_tag :next_step, @step + 1 %>
        <% else %>
          <%= hidden_field_tag :complete_step, true %>
        <% end %>

        <!-- Step 1: Basic Information -->
        <% if @step == 1 %>
          <div class="space-y-6">
            <div>
              <h2 class="text-xl font-semibold text-gray-900 mb-4">1단계: 정면 사진</h2>
              <p class="text-sm text-gray-900 mb-3">이목구비가 잘 보이는 사진을 올려주세요, 의상 및 포즈는 다음 페이지에서 참고할게요!</p>

            </div>
            
            <!-- Orderer Name -->
            <div>
              <%= form.label :orderer_name, "주문자 성함 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= form.text_field :orderer_name, 
                    class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 #{'border-red-300' if @order.errors[:orderer_name].any?}",
                    placeholder: "성함을 입력해주세요",
                    required: true,
                    id: "orderer_name_input" %>
              <% if @order.errors[:orderer_name].any? %>
                <p class="text-red-500 text-sm mt-1"><%= @order.errors[:orderer_name].first %></p>
              <% end %>
              <!-- 클라이언트 사이드 에러 메시지 -->
              <p id="orderer_name_error" class="text-red-500 text-sm mt-1 hidden"></p>
            </div>

            <!-- Main Images -->
            <div>
              <%= form.label :main_images, "메인 사진 업로드 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <p class="text-sm text-gray-600 mb-3">최대 5개까지 업로드 가능합니다</p>
              
              <!-- Image Upload Slots -->
              <div class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3 sm:gap-2 mb-4" id="image_slots">
                <% 5.times do |i| %>
                  <% if @order.main_images.attached? && @order.main_images[i] %>
                    <div class="image-slot aspect-square border-2 border-blue-500 rounded-lg relative overflow-hidden cursor-pointer" 
                         data-slot="<%= i %>" data-has-image="true">
                      <% begin %>
                        <%= image_tag @order.main_images[i], class: "w-full h-full object-cover rounded-lg" %>
                      <% rescue => e %>
                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                          <div class="text-center">
                            <svg class="w-4 h-4 text-gray-400 mx-auto mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2z"></path>
                            </svg>
                            <p class="text-xs text-gray-500">로드 실패</p>
                          </div>
                        </div>
                      <% end %>
                      <div class="absolute top-1 left-1 bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded">
                        <%= i + 1 %>
                      </div>
                      <!-- Delete button for uploaded images -->
                      <button type="button" class="delete-image-btn absolute top-1 right-1 bg-blue-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                              data-slot="<%= i %>" data-type="main">
                        ×
                      </button>
                    </div>
                  <% else %>
                    <div class="image-slot aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blue-400 transition-all cursor-pointer text-center p-2" 
                         data-slot="<%= i %>" data-has-image="false">
                      <svg class="w-4 h-4 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <span class="text-xs text-gray-500 mt-1"><%= i + 1 %></span>
                    </div>
                  <% end %>
                <% end %>
              </div>
              
              <%= form.file_field :main_images, 
                    multiple: true, 
                    accept: "image/jpeg,image/png",
                    class: "hidden",
                    id: "main_images_input" %>
              
              <!-- Hidden single file input for individual slot uploads -->
              <input type="file" 
                     accept="image/jpeg,image/png"
                     class="hidden"
                     id="main_single_image_input">
              
              <div class="text-center">
                <label for="main_images_input" class="btn-primary cursor-pointer">
                  사진 선택하기 (다중 업로드)
                </label>
                <p class="text-xs text-gray-500 mt-2">JPG, PNG 파일 | 개당 최대 10MB</p>
                <p class="text-xs text-gray-400 mt-1">• 다중 선택: 위 버튼 클릭 • 개별 업로드: 숫자 박스 클릭</p>
              </div>
              
              <% if @order.errors[:main_images].any? %>
                <p class="text-red-500 text-sm mt-2"><%= @order.errors[:main_images].first %></p>
              <% end %>
              <!-- 클라이언트 사이드 에러 메시지 -->
              <p id="main_images_error" class="text-red-500 text-sm mt-2 hidden"></p>
            </div>
          </div>
        <% end %>

        <!-- Step 2: Additional Information -->
        <% if @step == 2 %>
          <div class="space-y-6">
            <div>
            <h2 class="text-xl font-semibold text-gray-900 mb-4">2단계: 포즈 및 의상 정보</h2>
            <p class="text-xs text-red-500 mt-2">
            이 페이지에서는 **의상과 포즈 정보만** 참고합니다. <br> 
            (얼굴은 1페이지에서 업로드 해주신 사진으로 제작)
            </p>

            <ul class="text-sm text-gray-900 mb-3 list-disc pl-5 mt-4">
        <li class="mb-2"> - 1단계 사진과 동일한 경우, **같은 사진을 1장** 업로드 해주세요</li>
        <li> - 포즈 및 의상 사진은 **필수 업로드** 항목입니다. <br>        </li>
        <li class="italic text-gray-500">&nbsp;&nbsp;&nbsp;(예) OO항공 승무원복장으로 두손을 포개고 서있는 자세</li>

    </ul>
            </div>
            
            <!-- Optional Images -->
            <div>
              <%= form.label :optional_images, "포즈 및 의상 사진* (동일인이 아니어도 괜찮아요)", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <p class="text-sm text-gray-600 mb-3">최대 5개까지 업로드 가능합니다</p>
              
              <!-- Image Upload Slots for Optional Images -->
              <div class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3 sm:gap-2 mb-4" id="optional_image_slots">
                <% 5.times do |i| %>
                  <% if @order.optional_images.attached? && @order.optional_images[i] %>
                    <div class="optional-image-slot aspect-square border-2 border-green-500 rounded-lg relative overflow-hidden cursor-pointer" 
                         data-slot="<%= i %>" data-has-image="true">
                      <% begin %>
                        <%= image_tag @order.optional_images[i], class: "w-full h-full object-cover rounded-lg" %>
                      <% rescue => e %>
                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                          <div class="text-center">
                            <svg class="w-4 h-4 text-gray-400 mx-auto mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2z"></path>
                            </svg>
                            <p class="text-xs text-gray-500">로드 실패</p>
                          </div>
                        </div>
                      <% end %>
                      <div class="absolute top-1 left-1 bg-green-500 text-white text-xs px-1.5 py-0.5 rounded">
                        <%= i + 1 %>
                      </div>
                      <!-- Delete button for uploaded images -->
                      <button type="button" class="delete-image-btn absolute top-1 right-1 bg-green-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                              data-slot="<%= i %>" data-type="optional">
                        ×
                      </button>
                    </div>
                  <% else %>
                    <div class="optional-image-slot aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blue-400 transition-all cursor-pointer text-center p-2" 
                         data-slot="<%= i %>" data-has-image="false">
                      <svg class="w-4 h-4 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <span class="text-xs text-gray-500 mt-1"><%= i + 1 %></span>
                    </div>
                  <% end %>
                <% end %>
              </div>
              
              <%= form.file_field :optional_images, 
                    multiple: true, 
                    accept: "image/jpeg,image/png",
                    class: "hidden",
                    id: "optional_images_input" %>
              
              <!-- Hidden single file input for individual slot uploads -->
              <input type="file" 
                     accept="image/jpeg,image/png"
                     class="hidden"
                     id="optional_single_image_input">
              
              <div class="text-center">
                <label for="optional_images_input" class="btn-primary cursor-pointer">
                  사진 업로드 (다중 업로드)
                </label>
                <p class="text-xs text-gray-500 mt-2">JPG, PNG 파일 | 개당 최대 10MB</p>
                <p class="text-xs text-gray-400 mt-1">• 다중 선택: 위 버튼 클릭 • 개별 업로드: 숫자 박스 클릭</p>
              </div>
              
              <% if @order.errors[:optional_images].any? %>
                <p class="text-red-500 text-sm mt-2"><%= @order.errors[:optional_images].first %></p>
              <% end %>
              <!-- 클라이언트 사이드 에러 메시지 -->
              <p id="optional_images_error" class="text-red-500 text-sm mt-2 hidden"></p>
            </div>

            <!-- Additional Requests -->
            <div>
              <%= form.label :additional_requests, "요청사항 (선택)", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= form.text_area :additional_requests, 
                    class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                    rows: 4,
                    placeholder: "적당한 사진이 없다면 의상과 포즈 정보를 작성해 주세요. 사진은 동일인이 아니어도 괜찮답니다. 이 외 별도로 제작 시 특별히 고려해야 할 사항이 있다면 알려주세요 :) " %>
            </div>
          </div>
        <% end %>

        <!-- Step 3: Style and Message -->
        <% if @step == 3 %>
          <div class="space-y-6">
            <div>
              <h2 class="text-xl font-semibold text-gray-900 mb-4">3단계: 스타일 및 문구</h2>
            </div>
            
            <!-- Plaque Style Selection -->
            <div>
              <%= form.label :plaque_style, "기념패 스타일 *", class: "block text-sm font-medium text-gray-700 mb-3" %>
              <div class="grid grid-cols-2 gap-3">
                <% [
                  { value: 'gold_metal', name: '금속패 (골드)', desc: '고급스러운 골드' },
                  { value: 'silver_metal', name: '금속패 (실버)', desc: '깔끔한 실버' },
                  { value: 'acrylic_cartoon', name: '아크릴패 (카툰)', desc: '귀여운 카툰스타일' },
                  { value: 'acrylic_realistic', name: '아크릴패 (실사)', desc: '생생한 실사스타일' }
                ].each do |style| %>
                  <div class="relative">
                    <%= form.radio_button :plaque_style, style[:value], 
                          class: "hidden peer",
                          id: "style_#{style[:value]}" %>
                    <label for="style_<%= style[:value] %>" 
                           class="block cursor-pointer border-2 border-gray-200 rounded-lg p-4 hover:border-blue-400 peer-checked:border-blue-500 peer-checked:bg-blue-50 transition-all">
                      <div class="text-center">
                        <div class="w-full h-32 bg-gray-100 rounded-md mb-3 overflow-hidden">
                          <img src="/images/plaques/<%= style[:value] %>.png" 
                               class="w-full h-full object-contain"
                               alt="<%= style[:name] %>"
                               onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                          <div class="w-full h-full flex items-center justify-center text-gray-500 text-sm" style="display: none;">
                            <%= style[:name] %>
                          </div>
                        </div>
                        <h3 class="font-medium text-gray-900 text-sm"><%= style[:name] %></h3>
                        <p class="text-xs text-gray-600"><%= style[:desc] %></p>
                      </div>
                    </label>
                  </div>
                <% end %>
              </div>
              <% if @order.errors[:plaque_style].any? %>
                <p class="text-red-500 text-sm mt-2"><%= @order.errors[:plaque_style].first %></p>
              <% end %>
            </div>


            <!-- Style-specific Input Fields -->
            <div class="<%= 'hidden' unless @order.plaque_style.present? %>" id="message_section">
              
              <!-- 테두리 선택 (금속패 전용) -->
              <div id="borderSelectionPanel" style="display: none;" class="mb-6 border border-gray-200 rounded-lg p-4">
                <h4 class="text-md font-semibold text-gray-900 mb-3">
                  🎭 테두리 스타일 
                  <span class="ml-2 bg-yellow-100 text-yellow-800 text-xs font-medium px-2 py-1 rounded-full">금속패 전용</span>
                </h4>
                <div class="grid grid-cols-3 gap-3">
                  <% [
                    { value: 'type_a', name: 'A형', description: '액자형 테두리' },
                    { value: 'type_b', name: 'B형', description: '우측 상단 꽃장식' },
                    { value: 'type_c', name: '테두리 없음', description: '테두리 선택 안함' }
                  ].each do |border| %>
                    <div class="relative">
                      <%= form.radio_button :border_type, border[:value], 
                            { checked: (@order.border_type == border[:value] || (border[:value] == 'type_c' && @order.border_type.blank?)),
                              class: "hidden peer",
                              id: "border_#{border[:value]}" } %>
                      <label for="border_<%= border[:value] %>" 
                             class="block cursor-pointer border-2 border-gray-200 rounded-lg p-3 hover:border-blue-400 peer-checked:border-blue-500 peer-checked:bg-blue-50 transition-all">
                        <div class="text-center">
                          <div class="w-20 h-20 sm:w-16 sm:h-16 mx-auto mb-2 bg-gray-100 rounded flex items-center justify-center">
                            <% if border[:value] == 'type_a' || border[:value] == 'type_b' %>
                              <img src="/images/borders/thumb_<%= border[:value] %>.png" 
                                   alt="<%= border[:name] %>" 
                                   class="w-16 h-16 sm:w-12 sm:h-12 object-contain"
                                   onerror="this.style.display='none'; this.parentNode.innerHTML='<span class=&quot;text-gray-400 text-xs&quot;><%= border[:name] %></span>';" />
                            <% else %>
                              <div class="w-16 h-16 sm:w-12 sm:h-12 bg-gray-200 rounded flex items-center justify-center">
                                <span class="text-gray-400 text-xs">없음</span>
                              </div>
                            <% end %>
                          </div>
                          <div class="text-sm font-medium"><%= border[:name] %></div>
                          <div class="text-xs text-gray-500"><%= border[:description] %></div>
                        </div>
                      </label>
                    </div>
                  <% end %>
                </div>
              </div>

              <!-- Gold Metal Style -->
              <div class="style-input gold_metal <%= 'hidden' unless @order.plaque_style == 'gold_metal' %>">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">🥇 금속패 (골드) 제작 정보</h3>
                
                <!-- 제목 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_title, "제목 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_title,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "예: 전역패",
                          maxlength: 15,
                          data: { style: 'gold_metal', counter: 'title' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="title_counter_gold">0</span>/15자
                    </div>
                  </div>
                </div>

                <!-- 성함 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_name, "성함 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_name,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "예: 중사 김현호 (2020-01-01~2030-01-01)",
                          maxlength: 40,
                          data: { style: 'gold_metal', counter: 'name' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="name_counter_gold">0</span>/40자
                    </div>
                  </div>
                </div>

                <!-- 문구 자동 생성 (기본적으로 열린 상태) -->
                <div class="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div class="flex items-center justify-between cursor-pointer" onclick="toggleAiSettings('gold')">
                    <div class="flex items-center space-x-2">
                      <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                      <h4 class="text-sm font-semibold text-blue-800">문구 자동 생성</h4>
                      <span class="text-xs text-blue-600 bg-blue-100 px-2 py-0.5 rounded-full">AI 지원</span>
                    </div>
                    <svg id="ai_settings_arrow_gold" class="w-4 h-4 text-blue-600 transform transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  
                  <div id="ai_settings_gold" class="mt-4 space-y-4">
                    <!-- 관계 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">관계</label>
                      <select name="order[relationship]" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">선택하지 않음</option>
                        <option value="superior_to_subordinate">상사 → 부하직원</option>
                        <option value="colleague_to_colleague">동료 → 동료</option>
                        <option value="subordinate_to_superior">부하직원 → 상사</option>
                        <option value="family_to_family">가족 → 가족</option>
                        <option value="friend_to_friend">친구 → 친구</option>
                        <option value="organization_to_individual">기관 → 개인</option>
                      </select>
                    </div>
                    
                    <!-- 목적/상황 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">목적/상황</label>
                      <div class="grid grid-cols-2 gap-2">
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="retirement" class="mr-2 text-blue-600">
                          <span class="text-sm">퇴직/전역</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="promotion" class="mr-2 text-blue-600">
                          <span class="text-sm">승진/임명</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="graduation" class="mr-2 text-blue-600">
                          <span class="text-sm">졸업/수료</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="award" class="mr-2 text-blue-600">
                          <span class="text-sm">수상/표창</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="appreciation" class="mr-2 text-blue-600">
                          <span class="text-sm">감사 표현</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="anniversary" class="mr-2 text-blue-600">
                          <span class="text-sm">기념일</span>
                        </label>
                      </div>
                    </div>
                    
                    <!-- 톤앤매너 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">문구 스타일</label>
                      <div class="flex space-x-4">
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="formal" class="mr-2 text-blue-600" checked>
                          <span class="text-sm">격식있고 공식적</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="warm" class="mr-2 text-blue-600">
                          <span class="text-sm">따뜻하고 인간적</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="concise" class="mr-2 text-blue-600">
                          <span class="text-sm">간결하고 깔끔</span>
                        </label>
                      </div>
                    </div>
                    
                    <!-- 특별한 공로/특징 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">특별한 공로나 특징 <span class="text-xs text-gray-500">(선택사항)</span></label>
                      <input type="text" name="order[special_note]" 
                             class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                             placeholder="예: 20년간 성실근무, 팀워크 뛰어남, 신입 교육 담당 등"
                             maxlength="50">
                      <p class="text-xs text-gray-500 mt-1">더 정확한 문구를 위해 간단히 적어주세요 (최대 50자)</p>
                    </div>
                    
                    <!-- 자동 생성 버튼 -->
                    <div class="pt-2 border-t border-blue-200">
                      <button type="button" 
                              id="generate_content_gold" 
                              class="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-3 rounded-lg font-medium transition-all duration-200 shadow-sm hover:shadow-md flex items-center justify-center space-x-2"
                              data-style="gold_metal">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        <span>AI로 문구 자동생성하기</span>
                      </button>
                      <p class="text-xs text-blue-600 mt-2 text-center">위 설정을 바탕으로 맞춤형 문구를 생성합니다</p>
                    </div>
                  </div>
                </div>

                <!-- 본문 입력 -->
                <div class="mb-4">
                  <div class="mb-2">
                    <%= form.label :plaque_content, "본문 *", class: "text-sm font-medium text-gray-700" %>
                  </div>
                  <div class="relative">
                    <%= form.text_area :plaque_content,
                          class: "w-full px-3 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none min-h-[120px]",
                          rows: 6,
                          placeholder: "예: 오랜 시간 동안 헌신적으로 일해주신 노고에 깊이 감사드리며, 앞으로도 건강하고 행복한 나날 보내시길 바랍니다.",
                          maxlength: 150,
                          data: { style: 'gold_metal', counter: 'content' },
                          id: "plaque_content_gold" %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400 bg-white bg-opacity-80 px-1 rounded">
                      <span id="content_counter_gold">0</span>/150자
                    </div>
                  </div>
                </div>

                <!-- 추가요청사항 -->
                <div class="mb-4">
                  <%= form.label :plaque_additional_requests, "추가요청사항 (선택)", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <%= form.text_area :plaque_additional_requests,
                        class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                        rows: 3,
                        placeholder: "기념패 제작 시 특별히 고려해야 할 사항이 있다면 알려주세요",
                        data: { style: 'gold_metal' } %>
                </div>

                <div class="p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                  <p class="text-sm text-yellow-800">💡 고급스러움은 골드패가 안성맞춤!</p>
                </div>
              </div>

              <!-- Silver Metal Style -->
              <div class="style-input silver_metal <%= 'hidden' unless @order.plaque_style == 'silver_metal' %>">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">🥈 금속패 (실버) 제작 정보</h3>
                
                <!-- 제목 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_title, "제목 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_title,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "예: 새로운 시작을 응원합니다",
                          maxlength: 15,
                          data: { style: 'silver_metal', counter: 'title' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="title_counter_silver">0</span>/15자
                    </div>
                  </div>
                </div>

                <!-- 성함 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_name, "성함 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_name,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "중령 송 민 수",
                          maxlength: 40,
                          data: { style: 'silver_metal', counter: 'name' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="name_counter_silver">0</span>/40자
                    </div>
                  </div>
                </div>

                <!-- 문구 자동 생성 (기본적으로 열린 상태) -->
                <div class="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div class="flex items-center justify-between cursor-pointer" onclick="toggleAiSettings('silver')">
                    <div class="flex items-center space-x-2">
                      <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                      <h4 class="text-sm font-semibold text-blue-800">문구 자동 생성</h4>
                      <span class="text-xs text-blue-600 bg-blue-100 px-2 py-0.5 rounded-full">AI 지원</span>
                    </div>
                    <svg id="ai_settings_arrow_silver" class="w-4 h-4 text-blue-600 transform transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  
                  <div id="ai_settings_silver" class="mt-4 space-y-4">
                    <!-- 관계 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">관계</label>
                      <select name="order[relationship]" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">선택하지 않음</option>
                        <option value="superior_to_subordinate">상사 → 부하직원</option>
                        <option value="colleague_to_colleague">동료 → 동료</option>
                        <option value="subordinate_to_superior">부하직원 → 상사</option>
                        <option value="family_to_family">가족 → 가족</option>
                        <option value="friend_to_friend">친구 → 친구</option>
                        <option value="organization_to_individual">기관 → 개인</option>
                      </select>
                    </div>
                    
                    <!-- 목적/상황 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">목적/상황</label>
                      <div class="grid grid-cols-2 gap-2">
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="retirement" class="mr-2 text-blue-600">
                          <span class="text-sm">퇴직/전역</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="promotion" class="mr-2 text-blue-600">
                          <span class="text-sm">승진/임명</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="graduation" class="mr-2 text-blue-600">
                          <span class="text-sm">졸업/수료</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="award" class="mr-2 text-blue-600">
                          <span class="text-sm">수상/표창</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="appreciation" class="mr-2 text-blue-600">
                          <span class="text-sm">감사 표현</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[purpose]" value="anniversary" class="mr-2 text-blue-600">
                          <span class="text-sm">기념일</span>
                        </label>
                      </div>
                    </div>
                    
                    <!-- 톤앤매너 설정 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">문구 스타일</label>
                      <div class="flex space-x-4">
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="formal" class="mr-2 text-blue-600" checked>
                          <span class="text-sm">격식있고 공식적</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="warm" class="mr-2 text-blue-600">
                          <span class="text-sm">따뜻하고 인간적</span>
                        </label>
                        <label class="flex items-center">
                          <input type="radio" name="order[tone]" value="concise" class="mr-2 text-blue-600">
                          <span class="text-sm">간결하고 깔끔</span>
                        </label>
                      </div>
                    </div>
                    
                    <!-- 특별한 공로/특징 -->
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">특별한 공로나 특징 <span class="text-xs text-gray-500">(선택사항)</span></label>
                      <input type="text" name="order[special_note]" 
                             class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                             placeholder="예: 20년간 성실근무, 팀워크 뛰어남, 신입 교육 담당 등"
                             maxlength="50">
                      <p class="text-xs text-gray-500 mt-1">더 정확한 문구를 위해 간단히 적어주세요 (최대 50자)</p>
                    </div>
                    
                    <!-- 자동 생성 버튼 -->
                    <div class="pt-2 border-t border-blue-200">
                      <button type="button" 
                              id="generate_content_silver" 
                              class="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-3 rounded-lg font-medium transition-all duration-200 shadow-sm hover:shadow-md flex items-center justify-center space-x-2"
                              data-style="silver_metal">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        <span>AI로 문구 자동생성하기</span>
                      </button>
                      <p class="text-xs text-blue-600 mt-2 text-center">위 설정을 바탕으로 맞춤형 문구를 생성합니다</p>
                    </div>
                  </div>
                </div>

                <!-- 본문 입력 -->
                <div class="mb-4">
                  <div class="mb-2">
                    <%= form.label :plaque_content, "본문 *", class: "text-sm font-medium text-gray-700" %>
                  </div>
                  <div class="relative">
                    <%= form.text_area :plaque_content,
                          class: "w-full px-3 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none min-h-[120px]",
                          rows: 6,
                          placeholder: "예: 오랜 시간 동안 헌신적으로 일해주신 노고에 깊이 감사드리며, 앞으로도 건강하고 행복한 나날 보내시길 바랍니다.",
                          maxlength: 150,
                          data: { style: 'silver_metal', counter: 'content' },
                          id: "plaque_content_silver" %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400 bg-white bg-opacity-80 px-1 rounded">
                      <span id="content_counter_silver">0</span>/150자
                    </div>
                  </div>
                </div>

                <!-- 추가요청사항 -->
                <div class="mb-4">
                  <%= form.label :plaque_additional_requests, "추가요청사항 (선택)", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <%= form.text_area :plaque_additional_requests,
                        class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                        rows: 3,
                        placeholder: "기념패 제작 시 특별히 고려해야 할 사항이 있다면 알려주세요",
                        data: { style: 'silver_metal' } %>
                </div>

                <div class="p-3 bg-gray-50 border border-gray-200 rounded-md">
                  <p class="text-sm text-gray-700">💡 깔끔한 디자인엔 실버패가 딱이에요</p>
                </div>
              </div>

              <!-- Acrylic Cartoon Style -->
              <div class="style-input acrylic_cartoon <%= 'hidden' unless @order.plaque_style == 'acrylic_cartoon' %>">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">🎨 아크릴패 (카툰) 제작 정보</h3>
                
                <!-- 참조 사진 선택 -->
                <div class="mb-6">
                  <%= form.label :reference_image_index, "참조할 사진을 선택해주세요 *", class: "block text-sm font-medium text-gray-700 mb-3" %>
                  <div class="grid grid-cols-2 sm:grid-cols-3 gap-3" id="reference_images_cartoon">
                    <% if @order.main_images.attached? %>
                      <% @order.main_images.each_with_index do |image, index| %>
                        <div class="relative">
                          <%= form.radio_button :reference_image_index, index, 
                                class: "hidden peer",
                                id: "ref_img_cartoon_#{index}" %>
                          <label for="ref_img_cartoon_<%= index %>" 
                                 class="block cursor-pointer border-2 border-gray-300 rounded-lg overflow-hidden hover:border-blue-400 peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-200 transition-all">
                            <div class="aspect-square relative">
                              <%= image_tag image, class: "w-full h-full object-cover" %>
                              <div class="absolute inset-0 bg-black bg-opacity-0 peer-checked:bg-opacity-20 transition-all"></div>
                              <div class="absolute top-2 left-2 w-6 h-6 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center peer-checked:border-blue-500 peer-checked:bg-blue-500 transition-all">
                                <div class="w-2 h-2 bg-blue-500 rounded-full peer-checked:bg-white hidden peer-checked:block"></div>
                              </div>
                              <div class="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                                사진 <%= index + 1 %>
                              </div>
                            </div>
                            <div class="p-2 text-center">
                              <span class="text-sm font-medium text-gray-700 peer-checked:text-blue-600">사진 <%= index + 1 %></span>
                            </div>
                          </label>
                        </div>
                      <% end %>
                    <% end %>
                  </div>
                  <p class="text-xs text-gray-600 mt-2">ℹ️ 선택한 사진을 기준으로 아크릴패를 제작합니다. 언제든 변경 가능해요</p>
                  <% if @order.errors[:reference_image_index].any? %>
                    <p class="text-red-500 text-sm mt-1"><%= @order.errors[:reference_image_index].first %></p>
                  <% end %>
                </div>
                
                <!-- 상단문구 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_top_message, "상단문구 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_top_message,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "예: 취업축하",
                          maxlength: 10,
                          data: { style: 'acrylic_cartoon', counter: 'top' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="top_counter_cartoon">0</span>/10자
                    </div>
                  </div>
                </div>

                <!-- 메시지 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_main_message, "메시지 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_area :plaque_main_message,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                          rows: 2,
                          placeholder: "예: 서윤아 취업 축하해! 앞으로 꽃길만 걷자",
                          maxlength: 25,
                          data: { style: 'acrylic_cartoon', counter: 'main' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="main_counter_cartoon">0</span>/25자
                    </div>
                  </div>
                </div>

                <!-- 추가요청사항 -->
                <div class="mb-4">
                  <%= form.label :plaque_additional_requests, "추가요청사항 (선택)", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <%= form.text_area :plaque_additional_requests,
                        class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                        rows: 3,
                        placeholder: "기념패 제작 시 특별히 고려해야 할 사항이 있다면 알려주세요",
                        data: { style: 'acrylic_cartoon' } %>
                </div>

                <div class="p-3 bg-pink-50 border border-pink-200 rounded-md">
                  <p class="text-sm text-pink-800">💡 아기자기한 매력이 돋보이는 카툰 스타일!</p>
                </div>
              </div>

              <!-- Acrylic Realistic Style -->
              <div class="style-input acrylic_realistic <%= 'hidden' unless @order.plaque_style == 'acrylic_realistic' %>">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">📸 아크릴패 (실사) 제작 정보</h3>
                
                <!-- 참조 사진 선택 -->
                <div class="mb-6">
                  <%= form.label :reference_image_index, "참조할 사진을 선택해주세요 *", class: "block text-sm font-medium text-gray-700 mb-3" %>
                  <div class="grid grid-cols-2 sm:grid-cols-3 gap-3" id="reference_images_realistic">
                    <% if @order.main_images.attached? %>
                      <% @order.main_images.each_with_index do |image, index| %>
                        <div class="relative">
                          <%= form.radio_button :reference_image_index, index, 
                                class: "hidden peer",
                                id: "ref_img_realistic_#{index}" %>
                          <label for="ref_img_realistic_<%= index %>" 
                                 class="block cursor-pointer border-2 border-gray-300 rounded-lg overflow-hidden hover:border-blue-400 peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-200 transition-all">
                            <div class="aspect-square relative">
                              <%= image_tag image, class: "w-full h-full object-cover" %>
                              <div class="absolute inset-0 bg-black bg-opacity-0 peer-checked:bg-opacity-20 transition-all"></div>
                              <div class="absolute top-2 left-2 w-6 h-6 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center peer-checked:border-blue-500 peer-checked:bg-blue-500 transition-all">
                                <div class="w-2 h-2 bg-blue-500 rounded-full peer-checked:bg-white hidden peer-checked:block"></div>
                              </div>
                              <div class="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                                사진 <%= index + 1 %>
                              </div>
                            </div>
                            <div class="p-2 text-center">
                              <span class="text-sm font-medium text-gray-700 peer-checked:text-blue-600">사진 <%= index + 1 %></span>
                            </div>
                          </label>
                        </div>
                      <% end %>
                    <% end %>
                  </div>
                  <p class="text-xs text-gray-600 mt-2">ℹ️ 선택한 사진을 기준으로 아크릴패를 제작합니다. 언제든 변경 가능해요</p>
                  <% if @order.errors[:reference_image_index].any? %>
                    <p class="text-red-500 text-sm mt-1"><%= @order.errors[:reference_image_index].first %></p>
                  <% end %>
                </div>
                
                <!-- 상단문구 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_top_message, "상단문구 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_field :plaque_top_message,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          placeholder: "예: 취업축하❤️",
                          maxlength: 10,
                          data: { style: 'acrylic_realistic', counter: 'top' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="top_counter_realistic">0</span>/10자
                    </div>
                  </div>
                </div>

                <!-- 메시지 입력 -->
                <div class="mb-4">
                  <%= form.label :plaque_main_message, "메시지 *", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <div class="relative">
                    <%= form.text_area :plaque_main_message,
                          class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                          rows: 2,
                          placeholder: "예: 서윤아 취업 축하해! 앞으로 꽃길만 걷자",
                          maxlength: 25,
                          data: { style: 'acrylic_realistic', counter: 'main' } %>
                    <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                      <span id="main_counter_realistic">0</span>/25자
                    </div>
                  </div>
                </div>

                <!-- 추가요청사항 -->
                <div class="mb-4">
                  <%= form.label :plaque_additional_requests, "추가요청사항 (선택)", class: "block text-sm font-medium text-gray-700 mb-2" %>
                  <%= form.text_area :plaque_additional_requests,
                        class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none",
                        rows: 3,
                        placeholder: "기념패 제작 시 특별히 고려해야 할 사항이 있다면 알려주세요",
                        data: { style: 'acrylic_realistic' } %>
                </div>

                <div class="p-3 bg-blue-50 border border-blue-200 rounded-md">
                  <p class="text-sm text-blue-800">💡캐주얼한 분위기 UP</p>
                </div>
              </div>

              <% if @order.errors[:plaque_message].any? %>
                <p class="text-red-500 text-sm mt-3"><%= @order.errors[:plaque_message].first %></p>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Navigation Buttons -->
        <div class="flex justify-between items-center pt-6 border-t border-gray-200">
          <% if @step > 1 %>
            <%= link_to "이전으로", edit_order_path(@order.naver_order_number, step: @step - 1, force_edit: params[:force_edit]), 
                  class: "btn-secondary" %>
          <% else %>
            <div></div>
          <% end %>

          <% if @step < 3 %>
            <%= form.submit "다음 단계", class: "btn-primary" %>
          <% else %>
            <%= form.submit "주문 완료", class: "btn-primary" %>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
// Function to initialize everything
function initializePageFunctionality() {
  // Style selection functionality
  function setupStyleSelection() {
    const styleRadios = document.querySelectorAll('input[name="order[plaque_style]"]');
    const messageSection = document.getElementById('message_section');
    const styleInputs = document.querySelectorAll('.style-input');
    
    console.log('Setting up style selection - Found style radios:', styleRadios.length);
    console.log('Found message section:', messageSection);
    console.log('Found style inputs:', styleInputs.length);
    
    // Remove existing listeners and add new ones
    styleRadios.forEach(radio => {
      // Remove existing listener if any
      radio.removeEventListener('change', handleStyleChange);
      // Add new listener
      radio.addEventListener('change', handleStyleChange);
    });
    
    function handleStyleChange() {
      console.log('Style radio changed:', this.value, 'checked:', this.checked);
      
      if (this.checked) {
        const messageSection = document.getElementById('message_section');
        const styleInputs = document.querySelectorAll('.style-input');
        
        // Show message section
        if (messageSection) {
          console.log('Showing message section');
          messageSection.classList.remove('hidden');
          messageSection.classList.add('animate-fade-in');
        }
        
        
        // Remove required from all inputs first
        document.querySelectorAll('input[data-style], textarea[data-style]').forEach(input => {
          input.removeAttribute('required');
        });
        
        // Hide all style inputs and disable their form fields
        styleInputs.forEach(input => {
          input.classList.add('hidden');
          // Disable all form fields in hidden sections
          const formFields = input.querySelectorAll('input, textarea, select');
          formFields.forEach(field => {
            field.disabled = true;
          });
        });
        
        // Show the selected style input
        const selectedStyleInput = document.querySelector(`.style-input.${this.value}`);
        console.log('Selected style input:', selectedStyleInput);
        
        if (selectedStyleInput) {
          console.log('Showing selected style input for:', this.value);
          selectedStyleInput.classList.remove('hidden');
          selectedStyleInput.classList.add('animate-fade-in');
          
          // Enable form fields in the visible section
          const formFields = selectedStyleInput.querySelectorAll('input, textarea, select');
          formFields.forEach(field => {
            field.disabled = false;
          });
          
          // Don't set individual fields as required anymore - we'll handle validation in JavaScript
          // const visibleInputs = selectedStyleInput.querySelectorAll('input[data-style="' + this.value + '"], textarea[data-style="' + this.value + '"]');
          // visibleInputs.forEach(input => {
          //   input.setAttribute('required', 'required');
          //   console.log('Added required to input for style:', this.value);
          // });
        }
        
        // 테두리 선택 패널 표시/숨김 처리
        const borderPanel = document.getElementById('borderSelectionPanel');
        if (borderPanel) {
          const isMetalPlaque = this.value === 'gold_metal' || this.value === 'silver_metal';
          if (isMetalPlaque) {
            console.log('Showing border panel for metal plaque:', this.value);
            borderPanel.style.display = 'block';
          } else {
            console.log('Hiding border panel for acrylic plaque:', this.value);
            borderPanel.style.display = 'none';
          }
        }
      }
    }
  }


  // Image slot functionality for main images
  function setupImageSlots() {
    const imageSlots = document.querySelectorAll('.image-slot');
    const mainImagesInput = document.getElementById('main_images_input');
    const mainSingleInput = document.getElementById('main_single_image_input');
    
    // Remove existing event listeners first to prevent duplicates
    imageSlots.forEach(slot => {
      // Remove any existing click listeners by cloning the element
      const newSlot = slot.cloneNode(true);
      slot.parentNode.replaceChild(newSlot, slot);
    });
    
    // Get fresh references after cloning
    const refreshedImageSlots = document.querySelectorAll('.image-slot');
    
    // Add click event listeners to refreshed slots
    refreshedImageSlots.forEach(slot => {
      slot.addEventListener('click', function(e) {
        // Prevent event if clicking delete button
        if (e.target.classList.contains('delete-image-btn') || e.target.closest('.delete-image-btn')) {
          return;
        }
        
        const hasImage = slot.dataset.hasImage === 'true';
        const slotIndex = parseInt(slot.dataset.slot);
        
        if (hasImage) {
          // If slot has image, trigger single file input for replacement
          if (mainSingleInput) {
            mainSingleInput.dataset.targetSlot = slotIndex;
            mainSingleInput.click();
          }
        } else {
          // If empty slot, trigger single file input for that slot
          if (mainSingleInput) {
            mainSingleInput.dataset.targetSlot = slotIndex;
            mainSingleInput.click();
          }
        }
      });
    });
    
    // Setup delete button functionality
    setupDeleteButtons('main');
    
    if (mainImagesInput) {
      // Remove existing change listener
      mainImagesInput.removeEventListener('change', handleMainImageChange);
      // Add new change listener
      mainImagesInput.addEventListener('change', handleMainImageChange);
    }
    
    if (mainSingleInput) {
      // Remove existing change listener
      mainSingleInput.removeEventListener('change', handleMainSingleImageChange);
      // Add new change listener  
      mainSingleInput.addEventListener('change', handleMainSingleImageChange);
    }
  }
  
  // Separate function for main image change handling
  function handleMainImageChange(e) {
    const files = Array.from(e.target.files);
    const imageSlots = document.querySelectorAll('.image-slot');
    
    // Clear existing previews in slots
    imageSlots.forEach(slot => {
      slot.innerHTML = `
        <svg class="w-4 h-4 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        <span class="text-xs text-gray-500 mt-1">${slot.dataset.slot * 1 + 1}</span>
      `;
      slot.className = 'image-slot aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blue-400 transition-all cursor-pointer text-center p-2';
      slot.dataset.hasImage = 'false';
    });
    
    // Show previews in slots
    files.slice(0, 5).forEach((file, index) => {
      if (file.type.startsWith('image/') && index < 5) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const slot = imageSlots[index];
          slot.innerHTML = `
            <img src="${e.target.result}" class="w-full h-full object-cover rounded-lg">
            <div class="absolute top-1 left-1 bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded">
              ${index + 1}
            </div>
            <button type="button" class="delete-image-btn absolute top-1 right-1 bg-blue-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                    data-slot="${index}" data-type="main">
              ×
            </button>
          `;
          slot.className = 'image-slot aspect-square border-2 border-blue-500 rounded-lg relative overflow-hidden cursor-pointer';
          slot.dataset.hasImage = 'true';
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Re-setup functionality after DOM changes
    setTimeout(() => {
      setupImageSlots();
    }, 100);
  }

  // Optional images preview with slots
  function handleOptionalImages() {
    const optionalImageSlots = document.querySelectorAll('.optional-image-slot');
    const optionalImagesInput = document.getElementById('optional_images_input');
    const optionalSingleInput = document.getElementById('optional_single_image_input');
    
    // Remove existing event listeners first to prevent duplicates
    optionalImageSlots.forEach(slot => {
      // Remove any existing click listeners by cloning the element
      const newSlot = slot.cloneNode(true);
      slot.parentNode.replaceChild(newSlot, slot);
    });
    
    // Get fresh references after cloning
    const refreshedOptionalSlots = document.querySelectorAll('.optional-image-slot');
    
    // Add click event listeners to refreshed slots
    refreshedOptionalSlots.forEach(slot => {
      slot.addEventListener('click', function(e) {
        // Prevent event if clicking delete button
        if (e.target.classList.contains('delete-image-btn') || e.target.closest('.delete-image-btn')) {
          return;
        }
        
        const hasImage = slot.dataset.hasImage === 'true';
        const slotIndex = parseInt(slot.dataset.slot);
        
        if (hasImage) {
          // If slot has image, trigger single file input for replacement
          if (optionalSingleInput) {
            optionalSingleInput.dataset.targetSlot = slotIndex;
            optionalSingleInput.click();
          }
        } else {
          // If empty slot, trigger single file input for that slot
          if (optionalSingleInput) {
            optionalSingleInput.dataset.targetSlot = slotIndex;
            optionalSingleInput.click();
          }
        }
      });
    });
    
    // Setup delete button functionality
    setupDeleteButtons('optional');
    
    if (optionalImagesInput) {
      // Remove existing change listener
      optionalImagesInput.removeEventListener('change', handleOptionalImageChange);
      // Add new change listener
      optionalImagesInput.addEventListener('change', handleOptionalImageChange);
    }
    
    if (optionalSingleInput) {
      // Remove existing change listener
      optionalSingleInput.removeEventListener('change', handleOptionalSingleImageChange);
      // Add new change listener
      optionalSingleInput.addEventListener('change', handleOptionalSingleImageChange);
    }
  }
  
  // Separate function for optional image change handling
  function handleOptionalImageChange(e) {
    const files = Array.from(e.target.files);
    const optionalImageSlots = document.querySelectorAll('.optional-image-slot');
    
    // Clear existing previews in slots
    optionalImageSlots.forEach(slot => {
      slot.innerHTML = `
        <svg class="w-4 h-4 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        <span class="text-xs text-gray-500 mt-1">${slot.dataset.slot * 1 + 1}</span>
      `;
      slot.className = 'optional-image-slot aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blue-400 transition-all cursor-pointer text-center p-2';
      slot.dataset.hasImage = 'false';
    });
    
    // Show previews in slots
    files.slice(0, 5).forEach((file, index) => {
      if (file.type.startsWith('image/') && index < 5) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const slot = optionalImageSlots[index];
          slot.innerHTML = `
            <img src="${e.target.result}" class="w-full h-full object-cover rounded-lg">
            <div class="absolute top-1 left-1 bg-green-500 text-white text-xs px-1.5 py-0.5 rounded">
              ${index + 1}
            </div>
            <button type="button" class="delete-image-btn absolute top-1 right-1 bg-green-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                    data-slot="${index}" data-type="optional">
              ×
            </button>
          `;
          slot.className = 'optional-image-slot aspect-square border-2 border-green-500 rounded-lg relative overflow-hidden cursor-pointer';
          slot.dataset.hasImage = 'true';
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Re-setup functionality after DOM changes
    setTimeout(() => {
      handleOptionalImages();
    }, 100);
  }
  
  // New function for single file upload to main images
  function handleMainSingleImageChange(e) {
    const file = e.target.files[0];
    const targetSlot = parseInt(e.target.dataset.targetSlot);
    
    if (file && file.type.startsWith('image/') && targetSlot >= 0 && targetSlot <= 4) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const slot = document.querySelector(`.image-slot[data-slot="${targetSlot}"]`);
        if (slot) {
          slot.innerHTML = `
            <img src="${e.target.result}" class="w-full h-full object-cover rounded-lg">
            <div class="absolute top-1 left-1 bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded">
              ${targetSlot + 1}
            </div>
            <button type="button" class="delete-image-btn absolute top-1 right-1 bg-blue-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                    data-slot="${targetSlot}" data-type="main">
              ×
            </button>
          `;
          slot.className = 'image-slot aspect-square border-2 border-blue-500 rounded-lg relative overflow-hidden cursor-pointer';
          slot.dataset.hasImage = 'true';
          
          // Update the main images input with new file
          updateMainImagesInput(targetSlot, file);
        }
      };
      reader.readAsDataURL(file);
    }
    
    // Clear the input
    e.target.value = '';
    
    // Re-setup functionality after DOM changes
    setTimeout(() => {
      setupImageSlots();
    }, 100);
  }
  
  // New function for single file upload to optional images
  function handleOptionalSingleImageChange(e) {
    const file = e.target.files[0];
    const targetSlot = parseInt(e.target.dataset.targetSlot);
    
    if (file && file.type.startsWith('image/') && targetSlot >= 0 && targetSlot <= 4) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const slot = document.querySelector(`.optional-image-slot[data-slot="${targetSlot}"]`);
        if (slot) {
          slot.innerHTML = `
            <img src="${e.target.result}" class="w-full h-full object-cover rounded-lg">
            <div class="absolute top-1 left-1 bg-green-500 text-white text-xs px-1.5 py-0.5 rounded">
              ${targetSlot + 1}
            </div>
            <button type="button" class="delete-image-btn absolute top-1 right-1 bg-green-500 hover:bg-red-500 text-white text-sm w-6 h-6 rounded flex items-center justify-center transition-colors" 
                    data-slot="${targetSlot}" data-type="optional">
              ×
            </button>
          `;
          slot.className = 'optional-image-slot aspect-square border-2 border-green-500 rounded-lg relative overflow-hidden cursor-pointer';
          slot.dataset.hasImage = 'true';
          
          // Update the optional images input with new file
          updateOptionalImagesInput(targetSlot, file);
        }
      };
      reader.readAsDataURL(file);
    }
    
    // Clear the input
    e.target.value = '';
    
    // Re-setup functionality after DOM changes
    setTimeout(() => {
      handleOptionalImages();
    }, 100);
  }

  // Character counter for all input fields
  function setupCharacterCounter() {
    // Setup counters for all input fields with data-counter attribute
    const inputFields = document.querySelectorAll('input[data-counter], textarea[data-counter]');
    
    inputFields.forEach(field => {
      const counterType = field.dataset.counter;
      const style = field.dataset.style;
      
      // Find the corresponding counter element
      let counterId = '';
      switch(counterType) {
        case 'title':
          counterId = `title_counter_${style === 'gold_metal' ? 'gold' : 'silver'}`;
          break;
        case 'name':
          counterId = `name_counter_${style === 'gold_metal' ? 'gold' : 'silver'}`;
          break;
        case 'content':
          counterId = `content_counter_${style === 'gold_metal' ? 'gold' : 'silver'}`;
          break;
        case 'top':
          counterId = `top_counter_${style === 'acrylic_cartoon' ? 'cartoon' : 'realistic'}`;
          break;
        case 'main':
          counterId = `main_counter_${style === 'acrylic_cartoon' ? 'cartoon' : 'realistic'}`;
          break;
      }
      
      const counter = document.getElementById(counterId);
      if (counter) {
        // Add input event listener
        field.addEventListener('input', function() {
          const length = this.value.length;
          const maxLength = parseInt(this.getAttribute('maxlength')) || 0;
          counter.textContent = length;
          
          // Change color based on length
          if (length > maxLength * 0.9) {
            counter.classList.add('text-red-500');
            counter.classList.remove('text-gray-400');
          } else if (length > maxLength * 0.7) {
            counter.classList.add('text-yellow-500');
            counter.classList.remove('text-gray-400', 'text-red-500');
          } else {
            counter.classList.add('text-gray-400');
            counter.classList.remove('text-red-500', 'text-yellow-500');
          }
        });
        
        // Initialize counter
        const length = field.value.length;
        counter.textContent = length;
      }
    });
  }

  // Step 1 validation functions
  function validateStep1() {
    let isValid = true;
    
    // Validate orderer name
    const nameInput = document.getElementById('orderer_name_input');
    const nameError = document.getElementById('orderer_name_error');
    
    if (nameInput) {
      const name = nameInput.value.trim();
      if (!name) {
        nameError.textContent = '주문자 성함을 입력해주세요.';
        nameError.classList.remove('hidden');
        nameInput.classList.add('border-red-300');
        nameInput.classList.remove('border-gray-300');
        isValid = false;
      } else {
        nameError.classList.add('hidden');
        nameInput.classList.remove('border-red-300');
        nameInput.classList.add('border-gray-300');
      }
    }
    
    // Validate main images
    const imagesInput = document.getElementById('main_images_input');
    const imagesError = document.getElementById('main_images_error');
    
    if (imagesInput) {
      // Check both new files and existing images
      const hasNewImages = imagesInput.files.length > 0;
      const hasExistingImages = document.querySelectorAll('.image-slot.border-blue-500').length > 0;
      const hasImages = hasNewImages || hasExistingImages;
      
      if (!hasImages) {
        imagesError.textContent = '메인 사진을 최소 1개 업로드해주세요.';
        imagesError.classList.remove('hidden');
        isValid = false;
      } else {
        imagesError.classList.add('hidden');
      }
    }
    
    return isValid;
  }
  
  // Step 2 validation functions
  function validateStep2() {
    let isValid = true;
    
    // Validate optional images
    const optionalImagesInput = document.getElementById('optional_images_input');
    const optionalImagesError = document.getElementById('optional_images_error');
    
    if (optionalImagesInput) {
      // Check both new files and existing images
      const hasNewImages = optionalImagesInput.files.length > 0;
      const hasExistingImages = document.querySelectorAll('.optional-image-slot.border-green-500').length > 0;
      const hasImages = hasNewImages || hasExistingImages;
      
      if (!hasImages) {
        optionalImagesError.textContent = '포즈 및 의상 사진을 최소 1개 업로드해주세요.';
        optionalImagesError.classList.remove('hidden');
        isValid = false;
      } else {
        optionalImagesError.classList.add('hidden');
      }
    }
    
    return isValid;
  }
  
  // Real-time validation setup
  function setupRealTimeValidation() {
    // Name input validation
    const nameInput = document.getElementById('orderer_name_input');
    if (nameInput) {
      nameInput.addEventListener('blur', validateStep1);
      nameInput.addEventListener('input', function() {
        if (this.value.trim()) {
          const nameError = document.getElementById('orderer_name_error');
          nameError.classList.add('hidden');
          this.classList.remove('border-red-300');
          this.classList.add('border-gray-300');
        }
      });
    }
    
    // Main images input validation
    const imagesInput = document.getElementById('main_images_input');
    if (imagesInput) {
      imagesInput.addEventListener('change', function() {
        if (this.files.length > 0) {
          const imagesError = document.getElementById('main_images_error');
          imagesError.classList.add('hidden');
        }
        validateStep1();
      });
    }
    
    // Optional images input validation
    const optionalImagesInput = document.getElementById('optional_images_input');
    if (optionalImagesInput) {
      optionalImagesInput.addEventListener('change', function() {
        if (this.files.length > 0) {
          const optionalImagesError = document.getElementById('optional_images_error');
          optionalImagesError.classList.add('hidden');
        }
        validateStep2();
      });
    }
  }
  
  // Form validation on submit
  function setupButtonValidation() {
    const form = document.querySelector('form');
    if (form) {
      form.addEventListener('submit', function(e) {
        const stepInput = document.querySelector('input[name="step"]');
        const currentStep = stepInput ? stepInput.value : '1';
        
        // Validate based on current step
        if (currentStep === '1') {
          if (!validateStep1()) {
            e.preventDefault();
            
            // Scroll to first error
            const firstError = document.querySelector('.text-red-500:not(.hidden)');
            if (firstError) {
              firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        } else if (currentStep === '2') {
          if (!validateStep2()) {
            e.preventDefault();
            
            // Scroll to first error
            const firstError = document.querySelector('.text-red-500:not(.hidden)');
            if (firstError) {
              firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        } else if (currentStep === '3') {
          // Step 3 validation - check if style and message are selected
          const completeStepInput = document.querySelector('input[name="complete_step"]');
          console.log('Step 3 submit - complete_step input found:', !!completeStepInput);
          
          if (completeStepInput) {
            const isValid = validateStep3();
            console.log('Step 3 validation result:', isValid);
            
            if (!isValid) {
              e.preventDefault();
              const style = document.querySelector('input[name="order[plaque_style]"]:checked')?.value;
              let message = '기념패 스타일을 선택하고 내용을 입력해주세요.';
              if (style === 'gold_metal' || style === 'silver_metal') {
                message = '제목, 성함, 본문 중 최소 하나는 입력해주세요.';
              } else if (style === 'acrylic_cartoon' || style === 'acrylic_realistic') {
                message = '상단문구, 메시지 중 최소 하나는 입력해주세요.';
              }
              alert(message);
            } else {
              console.log('Step 3 validation passed - form should submit');
            }
          }
        }
      });
    }
  }
  
  // Step 3 validation function
  function validateStep3() {
    console.log('Starting validateStep3...');
    
    // Check if style is selected
    const checkedRadio = document.querySelector('input[name="order[plaque_style]"]:checked');
    console.log('Checked radio:', checkedRadio);
    if (!checkedRadio) {
      console.log('No style selected');
      return false;
    }
    
    const style = checkedRadio.value;
    console.log('Selected style:', style);
    
    // Check that at least one field is filled based on style
    let hasContent = false;
    
    if (style === 'gold_metal' || style === 'silver_metal') {
      // Metal plaques: at least one of title, name, or content must be filled
      const styleSection = document.querySelector(`.style-input.${style}:not(.hidden)`);
      if (styleSection) {
        const titleInput = styleSection.querySelector(`input[name="order[plaque_title]"]`);
        const nameInput = styleSection.querySelector(`input[name="order[plaque_name]"]`);
        const contentInput = styleSection.querySelector(`textarea[name="order[plaque_content]"]`);
        
        console.log('Metal plaque inputs:', {
          title: titleInput?.value,
          name: nameInput?.value,
          content: contentInput?.value
        });
        
        if ((titleInput && titleInput.value.trim()) || 
            (nameInput && nameInput.value.trim()) || 
            (contentInput && contentInput.value.trim())) {
          hasContent = true;
        }
      }
    } else if (style === 'acrylic_cartoon' || style === 'acrylic_realistic') {
      // Acrylic plaques: at least one of top message or main message must be filled
      const styleSection = document.querySelector(`.style-input.${style}:not(.hidden)`);
      if (styleSection) {
        const topInput = styleSection.querySelector(`input[name="order[plaque_top_message]"]`);
        const mainInput = styleSection.querySelector(`textarea[name="order[plaque_main_message]"]`);
        
        console.log('Acrylic plaque inputs:', {
          top: topInput?.value,
          main: mainInput?.value
        });
        
        if ((topInput && topInput.value.trim()) || 
            (mainInput && mainInput.value.trim())) {
          hasContent = true;
        }
      }
    }
    
    console.log('hasContent:', hasContent);
    return hasContent;
  }
  
  // Setup delete button functionality
  function setupDeleteButtons(type) {
    const deleteButtons = document.querySelectorAll(`.delete-image-btn[data-type="${type}"]`);
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent slot click event
        
        const slot = parseInt(this.dataset.slot);
        const imageType = this.dataset.type;
        
        if (confirm('이 사진을 삭제하시겠습니까?')) {
          deleteImageFromSlot(slot, imageType);
        }
      });
    });
  }
  
  // Delete image from specific slot
  function deleteImageFromSlot(slotIndex, type) {
    const slotClass = type === 'main' ? 'image-slot' : 'optional-image-slot';
    const slot = document.querySelector(`.${slotClass}[data-slot="${slotIndex}"]`);
    
    if (slot) {
      // Reset slot to empty state
      slot.innerHTML = `
        <svg class="w-4 h-4 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        <span class="text-xs text-gray-500 mt-1">${slotIndex + 1}</span>
      `;
      slot.className = `${slotClass} aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-blue-400 transition-all cursor-pointer text-center p-2`;
      slot.dataset.hasImage = 'false';
      
      // Remove file from input
      if (type === 'main') {
        removeFileFromMainImages(slotIndex);
      } else {
        removeFileFromOptionalImages(slotIndex);
      }
    }
    
    // Re-setup functionality after DOM changes
    setTimeout(() => {
      if (type === 'main') {
        setupImageSlots();
      } else {
        handleOptionalImages();
      }
    }, 100);
  }
  
  // Update main images input with new file at specific slot
  function updateMainImagesInput(slotIndex, newFile) {
    const input = document.getElementById('main_images_input');
    if (!input) return;
    
    // Create a new FileList with the new file at the specified index
    const dt = new DataTransfer();
    
    // Add existing files (except the slot we're updating)
    for (let i = 0; i < input.files.length; i++) {
      if (i !== slotIndex) {
        dt.items.add(input.files[i]);
      }
    }
    
    // Add new file at the correct position
    const files = Array.from(dt.files);
    while (files.length <= slotIndex) {
      files.push(null);
    }
    files[slotIndex] = newFile;
    
    // Rebuild DataTransfer with ordered files
    const newDt = new DataTransfer();
    files.forEach(file => {
      if (file) newDt.items.add(file);
    });
    
    input.files = newDt.files;
  }
  
  // Update optional images input with new file at specific slot
  function updateOptionalImagesInput(slotIndex, newFile) {
    const input = document.getElementById('optional_images_input');
    if (!input) return;
    
    // Create a new FileList with the new file at the specified index
    const dt = new DataTransfer();
    
    // Add existing files (except the slot we're updating)
    for (let i = 0; i < input.files.length; i++) {
      if (i !== slotIndex) {
        dt.items.add(input.files[i]);
      }
    }
    
    // Add new file at the correct position
    const files = Array.from(dt.files);
    while (files.length <= slotIndex) {
      files.push(null);
    }
    files[slotIndex] = newFile;
    
    // Rebuild DataTransfer with ordered files
    const newDt = new DataTransfer();
    files.forEach(file => {
      if (file) newDt.items.add(file);
    });
    
    input.files = newDt.files;
  }
  
  // Remove file from main images input at specific slot
  function removeFileFromMainImages(slotIndex) {
    const input = document.getElementById('main_images_input');
    if (!input) return;
    
    const dt = new DataTransfer();
    
    // Add all files except the one at slotIndex
    for (let i = 0; i < input.files.length; i++) {
      if (i !== slotIndex) {
        dt.items.add(input.files[i]);
      }
    }
    
    input.files = dt.files;
  }
  
  // Remove file from optional images input at specific slot
  function removeFileFromOptionalImages(slotIndex) {
    const input = document.getElementById('optional_images_input');
    if (!input) return;
    
    const dt = new DataTransfer();
    
    // Add all files except the one at slotIndex
    for (let i = 0; i < input.files.length; i++) {
      if (i !== slotIndex) {
        dt.items.add(input.files[i]);
      }
    }
    
    input.files = dt.files;
  }

  // Initialize required attributes on page load - no longer needed since we handle validation in JavaScript
  function initializeRequiredAttributes() {
    // Remove all required attributes since we're handling validation in JavaScript
    const allInputs = document.querySelectorAll('input[data-style], textarea[data-style]');
    allInputs.forEach(input => {
      input.removeAttribute('required');
    });
    console.log('Removed required attributes from all style inputs');
  }

  // Initialize existing data on page load
  function initializeExistingData() {
    // Initialize style selection for existing orders
    const checkedStyleRadio = document.querySelector('input[name="order[plaque_style]"]:checked');
    if (checkedStyleRadio) {
      console.log('Found existing style selection:', checkedStyleRadio.value);
      
      // Trigger change event to show the correct input fields
      const event = new Event('change', { bubbles: true });
      checkedStyleRadio.dispatchEvent(event);
    }
    
    // Initialize character counters for existing text
    const inputFields = document.querySelectorAll('input[data-counter], textarea[data-counter]');
    inputFields.forEach(field => {
      if (field.value) {
        // Trigger input event to update counter
        const event = new Event('input', { bubbles: true });
        field.dispatchEvent(event);
      }
    });
  }


  // AI 문구 생성 기능
  function setupAIContentGeneration() {
    const generateButtons = document.querySelectorAll('[id^="generate_content_"]');
    
    generateButtons.forEach(button => {
      button.addEventListener('click', async function(event) {
        // this 컨텍스트를 변수에 저장
        const clickedButton = event.target.closest('button');
        const style = clickedButton.dataset.style;
        const isGold = style === 'gold_metal';
        const isSilver = style === 'silver_metal';
        
        if (!isGold && !isSilver) return;
        
        // 중복 클릭 방지
        if (clickedButton.disabled) return;
        
        // 현재 스타일 섹션에서 제목과 성함 가져오기
        const styleSection = document.querySelector(`.style-input.${style}:not(.hidden)`);
        if (!styleSection) return;
        
        const titleInput = styleSection.querySelector('input[name="order[plaque_title]"]');
        const nameInput = styleSection.querySelector('input[name="order[plaque_name]"]');
        const contentTextarea = styleSection.querySelector('textarea[name="order[plaque_content]"]');
        
        const title = titleInput ? titleInput.value.trim() : '';
        const name = nameInput ? nameInput.value.trim() : '';
        
        // AI 맞춤 설정 정보 수집
        const relationshipSelect = styleSection.querySelector('select[name="order[relationship]"]');
        const purposeRadio = styleSection.querySelector('input[name="order[purpose]"]:checked');
        const toneRadio = styleSection.querySelector('input[name="order[tone]"]:checked');
        const specialNoteInput = styleSection.querySelector('input[name="order[special_note]"]');
        
        const relationship = relationshipSelect ? relationshipSelect.value : '';
        const purpose = purposeRadio ? purposeRadio.value : '';
        const tone = toneRadio ? toneRadio.value : 'formal';
        const specialNote = specialNoteInput ? specialNoteInput.value.trim() : '';
        
        // 로딩 상태 표시
        const originalText = clickedButton.innerHTML;
        clickedButton.disabled = true;
        clickedButton.innerHTML = `
          <svg class="w-3 h-3 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          <span>생성중...</span>
        `;
        
        try {
          // API 호출
          const response = await fetch('/orders/generate_content', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({
              title: title,
              name: name,
              style: style,
              relationship: relationship,
              purpose: purpose,
              tone: tone,
              special_note: specialNote
            })
          });
          
          // 응답 상태 확인
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('API 응답:', data); // 디버깅용
          
          if (data.success && data.content) {
            // 생성된 내용을 textarea에 삽입
            if (contentTextarea) {
              contentTextarea.value = data.content;
              // 문자 카운터 업데이트
              const event = new Event('input', { bubbles: true });
              contentTextarea.dispatchEvent(event);
              
              // 성공 애니메이션
              contentTextarea.classList.add('ring-2', 'ring-green-500');
              setTimeout(() => {
                contentTextarea.classList.remove('ring-2', 'ring-green-500');
              }, 2000);
            }
          } else {
            console.error('API 오류:', data); // 디버깅용
            alert(data.error || '문구 생성에 실패했습니다. 다시 시도해주세요.');
          }
        } catch (error) {
          console.error('AI 문구 생성 오류:', error);
          alert('문구 생성 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');
        } finally {
          // 로딩 상태 해제 - 항상 실행됨
          console.log('로딩 상태 해제:', clickedButton); // 디버깅용
          clickedButton.disabled = false;
          clickedButton.innerHTML = originalText;
        }
      });
    });
  }

  // AI 설정 토글 기능
  function setupAiSettingsToggle() {
    // toggleAiSettings 함수를 전역으로 정의
    window.toggleAiSettings = function(style) {
      const settingsDiv = document.getElementById(`ai_settings_${style}`);
      const arrow = document.getElementById(`ai_settings_arrow_${style}`);
      
      if (settingsDiv && arrow) {
        if (settingsDiv.classList.contains('hidden')) {
          settingsDiv.classList.remove('hidden');
          arrow.classList.add('rotate-180');
        } else {
          settingsDiv.classList.add('hidden');
          arrow.classList.remove('rotate-180');
        }
      }
    };
  }

  // Initialize all functionality
  initializeRequiredAttributes();
  setupStyleSelection();
  setupImageSlots();
  handleOptionalImages();
  setupCharacterCounter();
  setupRealTimeValidation();
  setupButtonValidation();
  setupAIContentGeneration();
  setupAiSettingsToggle();
  initializeExistingData();
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', initializePageFunctionality);

// Initialize on Turbo navigation (for step changes)
document.addEventListener('turbo:load', initializePageFunctionality);

// Initialize on page visibility change (fallback)
document.addEventListener('visibilitychange', function() {
  if (!document.hidden) {
    setTimeout(initializePageFunctionality, 100);
  }
});
</script>


<style>
@keyframes fade-in {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}
.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}
</style>